	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_eval
_eval:
	ld	hl, -398
	call	__frameset
	ld	bc, -281
	lea	iy, ix + 0
	add	iy, bc
	ld	de, 3
	ld	bc, 0
	lea	hl, ix + -16
	ld	(ix + -3), bc
	push	ix
	ld	bc, -287
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, ix + -25
	push	ix
	ld	bc, -290
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, ix + -34
	push	ix
	ld	bc, -308
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, ix + -43
	push	ix
	ld	bc, -314
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, ix + -58
	push	ix
	ld	bc, -311
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, ix + -67
	push	ix
	ld	bc, -380
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, ix + -85
	push	ix
	ld	bc, -353
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, ix + -89
	push	ix
	ld	bc, -350
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, ix + -107
	push	ix
	ld	bc, -356
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, ix + -125
	push	ix
	ld	bc, -359
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	bc, -143
	lea	hl, ix + 0
	add	hl, bc
	push	ix
	ld	bc, -362
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 120
	push	ix
	ld	bc, -365
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 102
	push	ix
	ld	bc, -371
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	bc, (ix + -3)
	lea	hl, iy + 84
	ld	(ix + -3), bc
	push	ix
	ld	bc, -374
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 66
	push	ix
	ld	bc, -377
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 57
	push	ix
	ld	bc, -344
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 39
	push	ix
	ld	bc, -347
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 21
	push	ix
	ld	bc, -296
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 3
	push	ix
	ld	bc, -317
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	bc, -368
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy + 0
	push	de
	ld	bc, (ix + -3)
	push	bc
	ld	bc, -329
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_strlen
	push	ix
	ld	bc, -284
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	pop	hl
	ld	hl, 9
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 9
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -290
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 9
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -308
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 9
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -314
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	ld	bc, 0
	pop	hl
	pop	hl
	pop	hl
	ld	de, -287
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy + 3
	push	ix
	ld	de, -320
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 6
	ld	de, -323
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	de, -290
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy + 3
	push	ix
	ld	de, -335
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 6
	ld	de, -338
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	de, -311
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy + 6
	ld	de, -341
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	hl, (ix + 6)
	ld	de, 26
	ld	(ix + -3), bc
	push	ix
	ld	bc, -299
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	ld	de, -305
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	ld	de, -284
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	ld	de, 0
	ld	(ix + -3), bc
	push	ix
	ld	bc, -326
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
BB0_1:
	ld	de, -293
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_239
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	ld	(ix + -7), a
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	cp	a, 10
	ld	hl, 0
	ld	bc, -302
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), hl
	ld	bc, -299
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	iy, (hl)
	jq	nz, BB0_6
BB0_3:
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	ld	(ix + -3), bc
	push	ix
	ld	bc, -302
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, de
	ld	bc, (ix + -3)
	jq	z, BB0_11
	ld	bc, -299
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	bc, -293
	lea	iy, ix + 0
	add	iy, bc
	ld	hl, (iy + 0)
	push	ix
	ld	bc, -302
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_18
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, -299
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	jq	BB0_3
BB0_6:
	cp	a, 35
	jq	nz, BB0_12
	lea	de, iy + 0
	ld	bc, 0
BB0_8:
	ld	(ix + -3), de
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	z, BB0_24
	ld	(ix + -3), de
	ld	de, -293
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	ld	a, (hl)
	cp	a, 10
	ld	de, (ix + -3)
	jq	z, BB0_30
	inc	bc
	jq	BB0_8
BB0_11:
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	jq	BB0_19
BB0_12:
	ld	bc, -383
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
	ld	e, a
	ld	bc, -302
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), de
	push	de
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_25
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_isdigit
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, -293
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	hl, (iy + 0)
	inc	hl
	jq	nz, BB0_32
	ld	de, -383
	lea	iy, ix + 0
	add	iy, de
	ld	c, (iy + 0)
	ld	a, c
	cp	a, 64
	ld	(ix + -3), bc
	push	ix
	ld	bc, -299
	push	af
	add	ix, bc
	pop	af
	ld	de, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	jq	nc, BB0_43
	ld	a, c
	cp	a, 36
	jq	z, BB0_45
	ld	a, c
	cp	a, 40
	jq	nz, BB0_56
	ld	a, e
	bit	1, a
	push	de
	pop	iy
	ld	de, 30
	jq	BB0_58
BB0_18:
	ld	bc, -299
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
BB0_19:
	lea	hl, iy + 0
	ld	bc, 1
	call	__iand
	ld	a, l
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	z, BB0_21
BB0_20:
	lea	bc, iy + 0
BB0_211:
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	jq	BB0_73
BB0_21:
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -284
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, bc
	jq	z, BB0_23
	ld	de, -293
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -302
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	add	hl, bc
	push	ix
	ld	de, -284
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	ld	a, (hl)
	cp	a, 41
	jq	nz, BB0_40
BB0_23:
	lea	hl, iy + 0
	ld	bc, -65
	call	__iand
	push	hl
	pop	bc
BB0_42:
	ld	de, -302
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	jq	BB0_73
BB0_24:
	push	de
	pop	bc
	lea	hl, iy + 0
	jq	BB0_73
BB0_25:
	ld	iy, 0
	lea	bc, iy + 0
	ld	(ix + -3), bc
	ld	bc, -284
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	ld	bc, -299
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	ld	bc, (ix + -3)
BB0_26:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB0_31
	ld	de, -293
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	de, -302
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), bc
	add	hl, bc
	ld	e, (hl)
	ld	bc, -383
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), e
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	push	hl
	call	_isspace
	pop	de
	push	ix
	ld	bc, -383
	add	ix, bc
	ld	a, (ix + 0)
	pop	ix
	cp	a, 10
	jq	z, BB0_41
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, -299
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	iy, (iy + 0)
	jq	z, BB0_20
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	inc	bc
	ld	(ix + -3), bc
	push	ix
	ld	bc, -284
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	jq	BB0_26
BB0_30:
	push	bc
	pop	hl
	push	de
	pop	bc
	jq	BB0_73
BB0_31:
	lea	bc, iy + 0
	ex	de, hl
BB0_73:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_239
BB0_74:
	push	hl
	pop	iy
	ld	de, 0
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_281
	ld	de, -293
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	lea	de, iy + 0
	add	hl, de
	ld	(ix + -3), bc
	push	ix
	ld	bc, -383
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	bc, -284
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	ld	bc, (ix + -3)
	push	bc
	pop	de
	push	hl
	pop	bc
	ld	(ix + -3), bc
	push	ix
	ld	bc, -293
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	ix
	ld	bc, -302
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	ix
	ld	bc, -383
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	cp	a, 35
	push	ix
	ld	bc, -386
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	bc, -299
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	jq	z, BB0_1
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	lea	hl, iy + 0
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	lea	de, iy + 0
	jq	nz, BB0_89
	ld	(ix + -3), de
	ld	de, -386
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	ld	l, c
	bit	5, l
	ld	de, (ix + -3)
	jq	z, BB0_90
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	ld	iyl, a
	lea	hl, iy + 0
	ld	de, 33
	or	a, a
	sbc	hl, de
	jq	nz, BB0_114
	ld	hl, L_.str.4
	ld	de, -293
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	hl, 2
	ex	de, hl
	jq	BB0_90
BB0_89:
	ld	(ix + -3), de
	ld	de, -386
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	ld	de, (ix + -3)
BB0_90:
	ld	(ix + -3), bc
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, 10
	ld	l, 1
	ld	bc, (ix + -3)
	jq	nz, BB0_92
	ld	l, 0
BB0_92:
	ld	a, c
	bit	6, a
	ld	a, 1
	jq	z, BB0_94
	ld	a, 0
BB0_94:
	ld	(ix + -3), bc
	push	ix
	ld	bc, -302
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	or	a, l
	ld	bc, (ix + -3)
	push	bc
	pop	hl
	ld	bc, -65
	call	__iand
	ld	(ix + -3), bc
	push	ix
	ld	bc, -386
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	bit	0, a
	ld	bc, (ix + -3)
	jq	nz, BB0_96
	ex	de, hl
BB0_96:
	bit	0, a
	jq	nz, BB0_98
	ld	hl, L_.str.5
	push	hl
	pop	iy
BB0_98:
	ld	bc, -299
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	bit	0, a
	jq	nz, BB0_100
	ld	hl, 1
	push	ix
	ld	bc, -302
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
BB0_100:
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	bc, -386
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), e
	ld	l, e
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	ix
	ld	de, -284
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -383
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	jq	nz, BB0_1
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_103
	ld	iy, 0
	ld	de, -326
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -332
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	jq	BB0_122
BB0_32:
	ld	bc, -389
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, -299
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	a, iyl
	bit	3, a
	ld	hl, -1
	push	ix
	ld	bc, -386
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), hl
	pop	ix
	ld	bc, -383
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	a, (hl)
	jq	z, BB0_60
	ld	de, 0
BB0_34:
	cp	a, 46
	jq	nz, BB0_37
	push	de
	pop	hl
	ld	(ix + -3), de
	ld	de, -284
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	c, BB0_39
	jq	BB0_36
BB0_37:
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	call	_isdigit
	push	hl
	pop	de
	pop	hl
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -3), de
	ld	de, -284
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	nc, BB0_88
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, -302
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	de, (iy + 0)
	jq	z, BB0_88
BB0_39:
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	inc	de
	ld	a, (hl)
	ld	(ix + -7), a
	jq	BB0_34
BB0_40:
	ld	bc, 90
	jq	BB0_211
BB0_41:
	ld	de, -299
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	jq	BB0_42
BB0_103:
	ld	bc, -386
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	cp	a, 40
	jq	nz, BB0_111
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	jq	nz, BB0_111
	ld	bc, (ix + -40)
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_116
	ld	iy, (ix + -43)
BB0_107:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_116
	ld	de, -332
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	bc, -386
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	ld	hl, (iy)
	ld	bc, -389
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	hl
	call	_strlen
	pop	de
	push	ix
	ld	bc, -305
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, de
	jq	nz, BB0_110
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncmp
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_119
BB0_110:
	ld	de, -386
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 12
	push	ix
	ld	de, -332
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	dec	bc
	ld	de, 1
	jq	BB0_107
BB0_43:
	ld	a, c
	cp	a, 94
	jq	z, BB0_61
	ld	a, c
	cp	a, 124
	jq	z, BB0_61
BB0_45:
	ld	(ix + -3), bc
	ld	bc, -389
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	a, e
	bit	4, a
	ld	hl, -2
	push	ix
	ld	bc, -386
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), hl
	pop	ix
	push	de
	pop	iy
	ld	bc, (ix + -3)
	jq	z, BB0_60
	ld	de, 0
BB0_47:
	ld	a, c
	cp	a, 64
	jq	nc, BB0_51
	ld	a, c
	add	a, -35
	cp	a, 2
	jq	nc, BB0_53
	jq	BB0_54
BB0_51:
	ld	a, c
	cp	a, 94
	jq	z, BB0_53
	ld	a, c
	cp	a, 124
	jq	nz, BB0_54
BB0_53:
	ld	a, c
	add	a, -48
	cp	a, 10
	jq	nc, BB0_50
BB0_54:
	push	de
	pop	hl
	ld	(ix + -3), de
	ld	de, -284
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	nc, BB0_50
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	inc	de
	ld	c, (hl)
	ld	(ix + -7), c
	jq	BB0_47
BB0_111:
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -329
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_var
	pop	de
	pop	de
	pop	de
	ld	de, -305
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	ld	iy, 0
	push	ix
	ld	de, -332
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	jq	z, BB0_122
	ld	hl, 18
	push	hl
	ld	bc, -323
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -320
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_vec_expand
	ld	iy, 0
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 2
	ld	hl, 0
	jq	nz, BB0_122
	ld	iy, (ix + -16)
	ld	hl, (ix + -13)
	push	hl
	pop	de
	inc	de
	ld	(ix + -13), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 26
	ld	(iy), hl
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	hl, 12
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	pea	iy + 6
	call	_memset
	ld	iy, 0
	pop	hl
	pop	hl
	pop	hl
	ld	bc, 2
	jq	BB0_121
BB0_88:
	ld	bc, 5
	jq	BB0_211
BB0_114:
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), iy
	lea	hl, iy + 0
	ld	de, 45
	or	a, a
	sbc	hl, de
	ld	hl, L_.str.2
	ld	de, -293
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	(iy + 0), hl
	ld	hl, 2
	ex	de, hl
	jq	z, BB0_90
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	de, 94
	or	a, a
	sbc	hl, de
	ld	hl, L_.str.3
	ld	de, -293
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	(iy + 0), hl
	ld	hl, 2
	ex	de, hl
	jq	nz, BB0_281
	jq	BB0_90
BB0_36:
	ex	de, hl
	ld	bc, 5
	jq	BB0_73
BB0_50:
	ex	de, hl
	ld	bc, 7
	jq	BB0_73
BB0_56:
	ld	a, c
	cp	a, 41
	jq	nz, BB0_61
	ld	a, e
	bit	2, a
	push	de
	pop	iy
	ld	de, 5
BB0_58:
	ld	hl, -3
	push	ix
	ld	bc, -386
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), hl
	pop	ix
	jq	z, BB0_60
	push	de
	pop	iy
	ld	hl, 1
	push	ix
	ld	bc, -386
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	jq	BB0_60
BB0_61:
	ex	de, hl
	ld	bc, 1
	call	__iand
	ld	a, l
	push	bc
	pop	iy
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	de, 0
	jq	z, BB0_69
	push	iy
	push	iy
	pea	ix + -7
	call	_expr_op
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	jq	z, BB0_64
	ld	a, 0
BB0_64:
	bit	0, a
	ld	bc, -299
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	de, (hl)
	jq	nz, BB0_66
	ld	hl, 58
	ex	de, hl
BB0_66:
	bit	0, a
	ld	hl, -4
	jq	nz, BB0_68
	ld	hl, 1
BB0_68:
	ld	bc, -386
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	de
	pop	iy
	jq	BB0_60
BB0_69:
	ld	(ix + -3), bc
	ld	bc, -386
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	ld	bc, (ix + -3)
	ld	de, -389
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), bc
	dec	bc
	push	ix
	ld	de, -302
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	ld	bc, -383
	add	ix, bc
	ld	e, (ix + 0)
	pop	ix
	ld	a, e
	cp	a, 64
	jq	nc, BB0_80
	ld	a, e
	add	a, -35
	ld	c, a
	ld	a, e
	add	a, -48
	ld	l, a
	ld	a, c
	cp	a, 2
	jq	c, BB0_72
	ld	a, l
	cp	a, 10
	jq	nc, BB0_82
	jq	BB0_72
BB0_80:
	ld	a, e
	cp	a, 94
	jq	z, BB0_82
	ld	a, e
	cp	a, 124
	jq	nz, BB0_72
BB0_82:
	or	a, a
	sbc	hl, hl
	ld	l, e
	push	hl
	ld	bc, -383
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), e
	call	_isspace
	push	hl
	pop	de
	pop	hl
	ld	bc, -383
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	and	a, -2
	ld	bc, -302
	lea	iy, ix + 0
	add	iy, bc
	ld	hl, (iy + 0)
	ld	(ix + -3), de
	push	ix
	ld	de, -284
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	nc, BB0_72
	cp	a, 40
	jq	z, BB0_72
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_72
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_op
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 1
	jq	nz, BB0_87
	ld	bc, -386
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	ld	de, 0
	jq	nz, BB0_210
BB0_87:
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -3), de
	ld	de, -389
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	add	hl, bc
	ld	a, (hl)
	ld	de, -383
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), a
	ld	(ix + -7), a
	inc	bc
	ld	de, (ix + -3)
	jq	BB0_69
BB0_72:
	ld	de, -386
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	a, l
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	ld	hl, -5
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	(iy + 0), hl
	ld	bc, 26
	ld	de, -299
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	iy, (hl)
	push	ix
	ld	de, -302
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	jq	nz, BB0_73
BB0_60:
	ld	de, -386
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	lea	bc, iy + 0
	jq	BB0_74
BB0_116:
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	jq	nz, BB0_118
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	cp	a, 36
	jq	z, BB0_119
BB0_118:
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_func
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_281
BB0_119:
	ld	hl, 6
	push	hl
	ld	bc, -338
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -335
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -290
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 1
	ld	hl, 0
	ld	iy, 0
	jq	nz, BB0_122
	ld	iy, (ix + -25)
	ld	hl, (ix + -22)
	push	hl
	pop	de
	inc	de
	ld	(ix + -22), de
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	push	ix
	ld	de, -326
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	iy, 0
	ld	bc, 1
BB0_121:
	ld	hl, 0
BB0_122:
	push	ix
	ld	de, -386
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	jq	nz, BB0_127
	ld	(ix + -3), bc
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	cp	a, 40
	ld	bc, (ix + -3)
	jq	nz, BB0_138
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_156
	ld	hl, 6
	push	hl
	ld	bc, -338
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -335
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -290
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_vec_expand
	ld	de, -284
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, 0
	push	ix
	ld	de, -332
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), iy
	pop	ix
	push	ix
	ld	de, -305
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), iy
	pop	ix
	ld	de, -386
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	hl, (iy + 0)
	push	ix
	ld	de, -326
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), hl
	pop	ix
	ld	de, -383
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	hl, (hl)
	jq	nz, BB0_1
	ld	iy, (ix + -25)
	ld	hl, (ix + -22)
	push	hl
	pop	de
	inc	de
	ld	(ix + -22), de
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	push	bc
	ld	hl, L___const.expr_create.str.8
	push	hl
	push	iy
	call	_memcpy
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	ld	iy, 0
	pop	hl
	pop	hl
	pop	hl
	ld	de, -383
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	push	ix
	ld	de, -305
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	(ix + -3), bc
	ld	bc, -386
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	jq	BB0_1
BB0_127:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB0_277
BB0_128:
	lea	bc, iy + 0
	ld	de, -332
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	xor	a, a
	push	ix
	ld	de, -305
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	ld	(ix + -3), bc
	push	ix
	ld	bc, -293
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
BB0_129:
	ld	(ix + -3), de
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	z, BB0_147
	ld	(ix + -3), bc
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
	push	de
	pop	hl
	ld	bc, (ix + -3)
	add	hl, bc
	ld	a, (hl)
	ld	(ix + -3), bc
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + -3)
	jq	nz, BB0_133
	cp	a, 46
	jq	nz, BB0_133
	ld	hl, 1
	ld	(ix + -3), bc
	push	ix
	ld	bc, -305
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	push	ix
	ld	bc, -386
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	jq	BB0_137
BB0_133:
	ld	de, -392
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	bc, -326
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -395
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	hl
	call	_isdigit
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_159
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jq	z, BB0_136
	inc	de
	ex	de, hl
BB0_136:
	ld	de, -305
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	de, -326
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	inc	hl
	push	ix
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, -332
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	push	ix
	ld	de, -389
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	ld	hl, 2097152
	ld	e, 65
	call	__fmul
	ld	(ix + -3), de
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	ld	de, (ix + -3)
	ld	d, a
	ld	bc, -48
	ld	(ix + -3), de
	push	ix
	ld	de, -395
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	add	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	ld	de, -326
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	iy, (iy + 0)
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	de, (ix + -3)
	ld	e, a
	ld	(ix + -3), de
	push	ix
	ld	de, -332
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	ld	a, d
	call	__fadd
	ld	(ix + -3), de
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	ld	de, -386
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	ld	(ix + -3), bc
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	ld	bc, (ix + -3)
	ld	(ix + -3), de
	push	ix
	ld	de, -392
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
BB0_137:
	inc	bc
	jq	BB0_129
BB0_138:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB0_277
	cp	a, 41
	jq	nz, BB0_128
	ld	bc, (ix + -31)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	dec	bc
	ld	de, -389
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	(hl), bc
	jq	m, BB0_142
	ld	iy, (ix + -34)
	ld	de, -389
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	bc, 15
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	iy, (iy)
BB0_142:
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), iy
	ld	iy, (ix + -22)
	lea	hl, iy + 0
	ld	bc, 6
	call	__imulu
	ld	de, -12
	add	hl, de
	push	ix
	ld	de, -293
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 0
BB0_143:
	push	hl
	pop	bc
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -302
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	call	__setflag
	dec	bc
	ld	de, -326
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	(hl), bc
	jq	p, BB0_185
	ld	iy, (ix + -25)
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	ld	hl, (iy + 6)
	ld	a, (hl)
	cp	a, 40
	jq	z, BB0_185
	cp	a, 123
	jq	z, BB0_185
	push	ix
	ld	bc, -302
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	dec	de
	ld	(ix + -22), de
	ld	de, (iy + 9)
	ld	(ix + -3), de
	ld	de, -287
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	push	bc
	ld	de, (ix + -3)
	push	de
	push	hl
	call	_expr_bind
	pop	de
	pop	de
	pop	de
	push	ix
	ld	bc, -293
	add	ix, bc
	ld	iy, (ix + 0)
	pop	ix
	ld	de, -6
	add	iy, de
	ld	de, -1
	or	a, a
	sbc	hl, de
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	(hl), iy
	ld	bc, -326
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	hl, (iy + 0)
	push	hl
	pop	iy
	jq	nz, BB0_143
	jq	BB0_281
BB0_147:
	ld	de, -326
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), iy
	ld	de, -332
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	push	ix
	ld	de, -305
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
BB0_148:
	lea	hl, iy + 0
	ld	de, 2
	or	a, a
	sbc	hl, de
	jq	c, BB0_150
	ld	hl, 2097152
	ld	e, 65
	call	__fdiv
	dec	iy
	jq	BB0_148
BB0_150:
	ld	e, a
	ld	(ix + -3), bc
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	ld	bc, (ix + -3)
	jq	z, BB0_152
	ld	a, 0
BB0_152:
	bit	0, a
	ld	hl, -4194304
	jq	nz, BB0_154
	push	bc
	pop	hl
BB0_154:
	bit	0, a
	ld	a, 127
	ld	c, a
	jq	nz, BB0_160
	ld	c, e
	jq	BB0_160
BB0_156:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	hl, 6
	jq	nz, BB0_277
	push	hl
	ld	bc, -338
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	push	de
	ld	bc, -335
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	push	ix
	ld	bc, -290
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	push	de
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_199
	ld	iy, (ix + -25)
	ld	hl, (ix + -22)
	push	hl
	pop	de
	inc	de
	push	ix
	ld	bc, -293
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	(ix + -22), de
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	push	bc
	ld	hl, L___const.expr_create.str
	push	hl
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	jq	BB0_200
BB0_159:
	ld	hl, -4194304
	ld	a, 127
	ld	c, a
BB0_160:
	ld	de, -392
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), bc
	push	bc
	push	ix
	ld	bc, -389
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	hl
	call	__isnanf
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_163
	ld	hl, 18
	push	hl
	ld	bc, -323
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -320
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 2
	ld	bc, -332
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), hl
	ld	iy, 0
	ld	bc, -305
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	(hl), iy
	ld	bc, -386
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	de, -284
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -383
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	jq	nz, BB0_1
	ld	iy, (ix + -16)
	ld	hl, (ix + -13)
	push	hl
	pop	de
	inc	de
	ld	(ix + -13), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 25
	ld	(iy), hl
	ld	de, -392
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	a, l
	ld	de, -389
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	(iy + 6), a
	ld	hl, 11
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	pea	iy + 7
	call	_memset
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	ld	iy, 0
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, -383
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -305
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	(ix + -3), bc
	ld	bc, -386
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	jq	BB0_1
BB0_163:
	ld	hl, -1
	push	hl
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_op
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_166
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_277
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	call	_isdigit
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, 0
	push	ix
	ld	de, -332
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), iy
	pop	ix
	ld	de, -302
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	hl, (iy + 0)
	push	ix
	ld	de, -305
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), hl
	pop	ix
	ld	de, -293
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	hl, (hl)
	push	ix
	ld	de, -326
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), hl
	pop	ix
	ld	de, -284
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	push	ix
	ld	de, -383
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	jq	z, BB0_1
	jq	BB0_281
BB0_166:
	ld	hl, -1
	push	hl
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_op
	ld	bc, -389
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -22)
	push	ix
	ld	bc, -305
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	hl, 0
	push	ix
	ld	bc, -332
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), hl
	pop	ix
	push	ix
	ld	bc, -326
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), hl
	pop	ix
	jq	m, BB0_168
	ld	iy, (ix + -25)
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	dec	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	hl, (iy + 3)
	ld	de, -326
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
BB0_168:
	ld	de, -389
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _prec
	add	hl, de
	ld	de, -392
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
BB0_169:
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	bc, 6
	call	__imulu
	ld	de, -395
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	bc, -1
	push	ix
	ld	de, -293
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
BB0_170:
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	jq	nz, BB0_175
	ld	a, (iy)
	ld	(ix + -3), bc
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	bc, (ix + -3)
	jq	m, BB0_175
	cp	a, 44
	jq	nz, BB0_175
	ld	iy, (ix + -25)
	ld	bc, -395
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -398
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	add	iy, de
	ld	hl, (iy + -3)
	ld	bc, -1
	ld	de, 1
	or	a, a
	sbc	hl, de
	jq	nz, BB0_175
	ld	(ix + -3), bc
	ld	bc, -395
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	ld	bc, -398
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	hl, (iy + -6)
	ld	a, (hl)
	cp	a, 123
	ld	bc, (ix + -3)
	jq	z, BB0_212
BB0_175:
	push	bc
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -332
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_op
	push	hl
	pop	de
	pop	hl
	pop	hl
	pop	hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_183
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jq	c, BB0_179
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 23
	or	a, a
	sbc	hl, bc
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jq	c, BB0_179
	ld	bc, -392
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	iy, (hl)
	push	de
	pop	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _prec
	add	hl, bc
	ld	bc, (hl)
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB0_180
BB0_179:
	ld	bc, -392
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	iy, (hl)
	ex	de, hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _prec
	add	hl, de
	ld	hl, (hl)
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB0_183
BB0_180:
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -332
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_bind
	pop	de
	pop	de
	pop	de
	ld	de, -1
	or	a, a
	sbc	hl, de
	jq	z, BB0_281
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	dec	bc
	ld	(ix + -22), bc
	ld	de, -6
	ld	(ix + -3), bc
	ld	bc, -395
	lea	iy, ix + 0
	add	iy, bc
	ld	hl, (iy + 0)
	add	hl, de
	ex	de, hl
	ld	bc, (ix + -3)
	ld	(ix + -3), de
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	bc
	pop	hl
	inc	hl
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	de, (ix + -3)
	ld	bc, -395
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	(hl), de
	ld	hl, 0
	push	ix
	ld	bc, -326
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), hl
	pop	ix
	ld	bc, -1
	ld	(ix + -3), bc
	ld	bc, -293
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	iy, (hl)
	ld	bc, (ix + -3)
	jq	m, BB0_170
	ld	iy, (ix + -25)
	add	iy, de
	ld	hl, (iy + -6)
	push	ix
	ld	bc, -332
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	hl, (iy + -3)
	ld	bc, -326
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	jq	BB0_169
BB0_183:
	ld	hl, 6
	push	hl
	ld	bc, -338
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -335
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -290
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, 0
	push	ix
	ld	bc, -332
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), iy
	pop	ix
	push	ix
	ld	bc, -305
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), iy
	pop	ix
	ld	bc, -386
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	de, -284
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -383
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	push	ix
	ld	de, -302
	push	af
	add	ix, de
	pop	af
	ld	iy, (ix + 0)
	pop	ix
	jq	nz, BB0_1
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + -25)
	ld	hl, (ix + -22)
	push	hl
	pop	de
	inc	de
	ld	(ix + -22), de
	ld	bc, 6
	call	__imulu
	push	ix
	ld	de, -284
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	hl
	pop	de
	add	iy, de
	push	ix
	ld	de, -293
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -383
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -302
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	ld	(iy + 3), de
	ld	iy, 0
	push	ix
	ld	bc, -332
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	push	ix
	ld	bc, -305
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	ld	bc, -386
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	jq	BB0_1
BB0_185:
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_281
	ld	iy, (ix + -25)
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -22), hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	push	ix
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	ld	hl, (iy + 9)
	ld	de, 1
	or	a, a
	sbc	hl, de
	ld	hl, 2
	ld	bc, -332
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), hl
	ld	iy, 0
	ld	bc, -305
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	(hl), iy
	ld	bc, -386
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	de, -284
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -383
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	jq	nz, BB0_1
	ex	de, hl
	ld	(ix + -3), bc
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 6)
	ld	a, (hl)
	cp	a, 123
	ld	hl, 2
	ld	bc, -332
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), hl
	ex	de, hl
	ld	iy, 0
	push	ix
	ld	bc, -305
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), iy
	pop	ix
	ld	bc, -386
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	jq	nz, BB0_1
	ld	de, -2
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ld	(ix + -22), hl
	ld	de, -293
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	ld	hl, (iy)
	push	ix
	ld	de, -302
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	hl, (iy + 3)
	ld	de, -293
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	iy, (ix + -34)
	ld	de, -389
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -31), hl
	ld	bc, 15
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	push	bc
	push	iy
	ld	bc, -311
	lea	iy, ix + 0
	add	iy, bc
	ld	hl, (iy + 0)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix + -13)
	ld	hl, (ix + -55)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB0_191
	ld	hl, 18
	push	hl
	ld	bc, -311
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 12
	pea	iy + 9
	ld	bc, -341
	lea	iy, ix + 0
	add	iy, bc
	ld	hl, (iy + 0)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_191
	ld	iy, (ix + -52)
	ld	hl, (ix + -49)
	push	hl
	pop	de
	inc	de
	ld	(ix + -49), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	push	ix
	ld	de, -305
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	iy, (ix + -16)
	ld	hl, (ix + -13)
	dec	hl
	ld	(ix + -13), hl
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	push	bc
	push	iy
	ld	bc, -305
	lea	iy, ix + 0
	add	iy, bc
	ld	hl, (iy + 0)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB0_191:
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	jq	nz, BB0_202
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	cp	a, 36
	jq	nz, BB0_202
	ld	hl, (ix + -49)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_278
	ld	hl, (ix + -52)
	push	hl
	pop	bc
	ld	hl, (hl)
	ld	de, 26
	or	a, a
	sbc	hl, de
	jq	nz, BB0_279
	ld	de, -329
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
BB0_196:
	ld	hl, (hl)
	ld	de, -293
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_237
	push	bc
	pop	iy
	ld	de, (iy + 3)
	ld	(ix + -3), bc
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	ld	bc, (ix + -3)
	jq	z, BB0_235
	ld	de, -293
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy + 4
	jq	BB0_196
BB0_199:
	ld	hl, (ix + -22)
	ld	bc, -293
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
BB0_200:
	ld	hl, (ix + -13)
	ld	bc, -302
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	hl, 15
	push	hl
	ld	bc, -308
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 6
	pea	iy + 3
	push	iy
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, 0
	push	ix
	ld	bc, -332
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), iy
	pop	ix
	push	ix
	ld	bc, -305
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), iy
	pop	ix
	ld	bc, -386
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	de, -284
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -383
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	jq	nz, BB0_1
	ld	iy, (ix + -34)
	ld	hl, (ix + -31)
	push	hl
	pop	de
	inc	de
	ld	(ix + -31), de
	ld	bc, 15
	call	__imulu
	push	ix
	ld	de, -284
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	hl
	pop	de
	add	iy, de
	push	ix
	ld	de, -293
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	hl, 0
	ld	(iy + 6), hl
	ld	(iy + 9), hl
	ld	(iy + 12), hl
	ld	de, -383
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	iy, 0
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	push	ix
	ld	de, -305
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	(ix + -3), bc
	ld	bc, -386
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	jq	BB0_1
BB0_202:
	ld	bc, (ix + -40)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_215
	ld	hl, (ix + -43)
	ld	de, -392
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	hl
	pop	iy
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	dec	hl
	ld	(ix + -3), de
	push	ix
	ld	de, -326
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, -332
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	ld	de, (ix + -3)
BB0_204:
	push	bc
	pop	hl
	push	ix
	ld	bc, -305
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	or	a, a
	sbc	hl, de
	jq	z, BB0_214
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	hl, (iy)
	ld	bc, -395
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	hl
	call	_strlen
	pop	de
	push	ix
	ld	bc, -293
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, de
	jq	nz, BB0_209
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -395
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncmp
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, -305
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	hl, (iy + 0)
	jq	z, BB0_208
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
BB0_208:
	ld	bc, -326
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
BB0_209:
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	inc	de
	ld	bc, -389
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	lea	iy, iy + 12
	ld	(ix + -3), de
	push	ix
	ld	de, -332
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	jq	BB0_204
BB0_210:
	ld	bc, 26
	jq	BB0_211
BB0_212:
	ld	iy, (ix + -16)
	ld	hl, (ix + -13)
	dec	hl
	ld	(ix + -13), hl
	ld	de, 18
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 18
	push	hl
	push	iy
	ld	de, -347
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix + -34)
	ld	hl, (ix + -31)
	dec	hl
	ld	(ix + -3), de
	ld	de, -389
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	bc, 15
	call	__imulu
	push	hl
	pop	bc
	ld	de, (ix + -3)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -293
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	push	de
	pop	iy
	ld	bc, (ix + -3)
	add	iy, bc
	ld	hl, 18
	push	hl
	pea	iy + 12
	pea	iy + 9
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	pea	iy + 6
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, 0
	push	ix
	ld	de, -332
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), iy
	pop	ix
	push	ix
	ld	de, -305
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), iy
	pop	ix
	ld	de, -386
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	hl, (iy + 0)
	push	ix
	ld	de, -326
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), hl
	pop	ix
	ld	de, -284
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	push	ix
	ld	de, -383
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	jq	nz, BB0_1
	ld	de, -389
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	bc, 15
	call	__imulu
	push	hl
	pop	de
	ld	(ix + -3), bc
	ld	bc, -293
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	hl, (iy + 6)
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 9)
	push	hl
	pop	de
	inc	de
	ld	(iy + 9), de
	ld	bc, (ix + -3)
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	ld	(ix + -3), bc
	ld	bc, -293
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	bc, (ix + -3)
	push	bc
	push	ix
	ld	bc, -347
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	push	hl
	push	iy
	call	_memcpy
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	ld	iy, 0
	pop	hl
	pop	hl
	pop	hl
	ld	de, -383
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	push	ix
	ld	de, -305
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	(ix + -3), bc
	ld	bc, -386
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	jq	BB0_1
BB0_214:
	ld	de, -326
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	ld	de, -1
	or	a, a
	sbc	hl, de
	jq	nz, BB0_219
BB0_215:
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_func
	ld	bc, -293
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	pop	hl
	pop	hl
	ld	hl, 9
	push	hl
	ld	bc, -341
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -344
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 0
	ld	bc, -302
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), de
	jq	z, BB0_217
	push	hl
	ld	hl, 1
	push	hl
	call	_calloc
	pop	de
	pop	de
	ld	bc, -302
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_281
BB0_217:
	ld	hl, 18
	push	hl
	ld	bc, -323
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -320
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 2
	ld	de, -332
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	(iy + 0), hl
	ld	iy, 0
	ld	de, -305
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	(hl), iy
	ld	de, -386
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	hl, (iy + 0)
	push	ix
	ld	de, -326
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), hl
	pop	ix
	ld	de, -284
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	push	ix
	ld	de, -383
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	jq	nz, BB0_1
	ld	iy, (ix + -16)
	ld	hl, (ix + -13)
	push	hl
	pop	de
	inc	de
	ld	(ix + -13), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	push	ix
	ld	de, -305
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	hl, 27
	ld	(iy), hl
	ld	de, -293
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	hl, 9
	push	hl
	ld	de, -344
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	pea	iy + 6
	call	_memcpy
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	ld	iy, 0
	lea	de, iy + 0
	pop	hl
	pop	hl
	pop	hl
	ld	(ix + -3), bc
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -305
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	ld	(iy + 15), hl
	ld	hl, 2
	ld	bc, -332
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, -383
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -305
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	bc, -386
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	push	ix
	ld	bc, -326
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	jq	BB0_1
BB0_219:
	push	bc
	pop	hl
	ld	bc, 12
	call	__imulu
	push	hl
	pop	de
	ld	(ix + -3), bc
	ld	bc, -392
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	hl, (iy + 3)
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	hl, (iy + 6)
	ld	de, -302
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	hl, 11
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	de, -353
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	pea	iy + 7
	ld	bc, (ix + -3)
	call	_memset
	ld	de, 0
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 25
	ld	(ix + -85), hl
	ld	(ix + -82), de
	xor	a, a
	ld	(ix + -79), a
	ld	bc, (ix + -49)
	ld	hl, (ix + -52)
	ld	(ix + -3), de
	ld	de, -305
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	de, -326
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	bc
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	de, (ix + -3)
	jq	p, BB0_221
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
BB0_221:
	ld	bc, -353
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -293
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
BB0_222:
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	jq	z, BB0_224
	push	de
	pop	hl
	inc	hl
	ld	bc, -389
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	inc	de
	push	de
	ld	hl, L_.str.9
	push	hl
	ld	hl, 3
	push	hl
	ld	bc, -350
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_snprintf_
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -350
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strlen
	pop	de
	push	hl
	ld	bc, -350
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -329
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_var
	push	ix
	ld	bc, -392
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 12
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -356
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 6
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 26
	ld	(ix + -107), hl
	ld	bc, -392
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -104), hl
	ld	hl, -36
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	hl, 18
	push	hl
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	pea	iy + 24
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 18
	push	hl
	ld	bc, -356
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -392
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 6
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 23
	push	hl
	ld	bc, -359
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_binary
	ld	hl, 42
	add	hl, sp
	ld	sp, hl
	ld	hl, 11
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -365
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 7
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 25
	ld	bc, -368
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	ld	(iy + 120), hl
	or	a, a
	sbc	hl, hl
	ld	(iy + 123), hl
	xor	a, a
	ld	(iy + 126), a
	ld	hl, -36
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	ld	bc, -392
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	hl, 18
	push	hl
	ld	bc, -365
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	pea	iy + 24
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 18
	push	hl
	ld	bc, -359
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -392
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 6
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 24
	push	hl
	ld	bc, -362
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_binary
	ld	hl, 42
	add	hl, sp
	ld	sp, hl
	ld	hl, 18
	push	hl
	ld	bc, -362
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	iy, (iy + 3)
	lea	hl, iy + 18
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 18
	push	ix
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	ld	bc, -389
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	jq	BB0_222
BB0_224:
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	de, -326
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	(hl), bc
	jq	p, BB0_226
	ld	hl, 1
	ld	bc, -326
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
BB0_226:
	ld	bc, -302
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, -332
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 18
	ld	bc, -305
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	hl, 1
	ex	de, hl
BB0_227:
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	jq	z, BB0_232
	ld	bc, -332
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	bc, -302
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB0_230
	ld	hl, 11
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -374
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 7
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 25
	ld	bc, -368
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	ld	(iy + 84), hl
	or	a, a
	sbc	hl, hl
	ld	(iy + 87), hl
	xor	a, a
	ld	(iy + 90), a
	ld	de, 11
	push	de
	push	hl
	ld	bc, -377
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 7
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 25
	ld	bc, -368
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	ld	(iy + 66), hl
	or	a, a
	sbc	hl, hl
	ld	(iy + 69), hl
	xor	a, a
	ld	(iy + 72), a
	ld	hl, -36
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	hl, 18
	push	hl
	ld	bc, -377
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	pea	iy + 24
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 18
	push	hl
	ld	bc, -374
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -389
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 6
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 24
	push	hl
	ld	bc, -371
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_binary
	ld	hl, 42
	add	hl, sp
	ld	sp, hl
	ld	hl, 18
	push	hl
	ld	bc, -371
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 3)
	ld	bc, -305
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	jq	BB0_231
BB0_230:
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
BB0_231:
	push	hl
	call	_expr_copy
	pop	hl
	pop	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	iy, (iy + 3)
	lea	hl, iy + 18
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, -332
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	inc	de
	push	ix
	ld	bc, -305
	add	ix, bc
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 18
	push	ix
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	jq	BB0_227
BB0_232:
	ld	hl, 18
	push	hl
	ld	bc, -323
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -320
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_234
	ld	iy, (ix + -16)
	ld	hl, (ix + -13)
	push	hl
	pop	de
	inc	de
	ld	(ix + -13), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	push	bc
	push	ix
	ld	bc, -353
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	push	hl
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB0_234:
	ld	hl, (ix + -52)
	push	hl
	call	_free
	pop	hl
	ld	hl, 2
	ld	de, -332
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	iy, 0
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), iy
	ld	de, -386
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	push	ix
	ld	de, -326
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	push	ix
	ld	de, -383
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	jq	BB0_1
BB0_235:
	ld	hl, 9
	push	hl
	ld	bc, -341
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -380
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 12
	push	hl
	ld	bc, -314
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 6
	pea	iy + 3
	push	iy
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_237
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	lea	de, iy + 7
	ld	iy, (ix + -43)
	ld	hl, (ix + -40)
	push	hl
	pop	bc
	inc	bc
	ld	(ix + -40), bc
	ld	bc, 12
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(iy), de
	ld	hl, 9
	push	hl
	ld	bc, -380
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB0_237:
	ld	hl, 18
	push	hl
	ld	bc, -323
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -320
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 2
	ld	de, -332
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	(iy + 0), hl
	ld	iy, 0
	ld	de, -305
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	(hl), iy
	ld	de, -386
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	hl, (iy + 0)
	push	ix
	ld	de, -326
	push	af
	add	ix, de
	pop	af
	ld	(ix + 0), hl
	pop	ix
	ld	de, -284
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	push	ix
	ld	de, -383
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	jq	nz, BB0_1
	ld	iy, (ix + -16)
	ld	hl, (ix + -13)
	push	hl
	pop	de
	inc	de
	ld	(ix + -13), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 25
	ld	(iy), hl
	or	a, a
	sbc	hl, hl
	ld	(iy + 3), hl
	xor	a, a
	ld	(iy + 6), a
	ld	hl, 11
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	pea	iy + 7
	call	_memset
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	ld	iy, 0
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	ix
	ld	de, -332
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, -383
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -305
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	(ix + -3), bc
	ld	bc, -386
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	ix
	ld	bc, -326
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
	jq	BB0_1
BB0_239:
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_242
	ld	hl, 18
	push	hl
	ld	bc, -323
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -320
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_242
	ld	hl, (ix + -16)
	ld	bc, -284
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	hl, (ix + -13)
	push	ix
	ld	bc, -290
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	inc	hl
	ld	(ix + -13), hl
	ld	bc, -305
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -326
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -329
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_var
	push	hl
	pop	de
	pop	hl
	pop	hl
	pop	hl
	ld	bc, 18
	ld	(ix + -3), de
	ld	de, -290
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	call	__imulu
	push	hl
	pop	bc
	push	ix
	ld	de, -284
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	add	iy, bc
	ld	hl, 26
	ld	(iy), hl
	ld	de, (ix + -3)
	ld	(iy + 3), de
	ld	hl, 12
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	pea	iy + 6
	call	_memset
	pop	hl
	pop	hl
	pop	hl
BB0_242:
	ld	de, (ix + -22)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB0_246
	ld	iy, (ix + -25)
	dec	de
	ld	(ix + -22), de
	ex	de, hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	ld	de, (iy + 3)
	push	hl
	pop	iy
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_245
	ld	a, (iy)
	and	a, -2
	cp	a, 40
	jq	z, BB0_281
BB0_245:
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	push	de
	push	iy
	call	_expr_bind
	pop	de
	pop	de
	pop	de
	ld	de, -1
	or	a, a
	sbc	hl, de
	jq	nz, BB0_242
BB0_281:
	ld	hl, 0
	ld	bc, -287
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	de, 1
	jq	BB0_250
BB0_246:
	ld	hl, 18
	push	hl
	ld	hl, 1
	push	hl
	call	_calloc
	push	hl
	pop	iy
	pop	hl
	pop	hl
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	push	ix
	ld	bc, -287
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), hl
	pop	ix
	ld	de, 1
	jq	z, BB0_250
	ld	hl, (ix + -13)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_249
	ld	hl, 25
	ld	(iy), hl
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	jq	BB0_250
BB0_249:
	push	ix
	ld	de, -284
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	iy, (ix + -16)
	dec	hl
	ld	(ix + -13), hl
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 18
	push	hl
	push	iy
	ld	de, -284
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_memcpy
	ld	de, 1
	pop	hl
	pop	hl
	pop	hl
	ld	(ix + -3), bc
	ld	bc, -284
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -287
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, (ix + -3)
BB0_250:
	ld	bc, (ix + -40)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_258
	ld	hl, (ix + -43)
	ld	de, -284
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	iy, 0
BB0_252:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	jq	z, BB0_259
	ld	de, -293
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -299
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	lea	hl, iy + 0
	ld	bc, 12
	call	__imulu
	push	hl
	pop	de
	ld	(ix + -3), bc
	ld	bc, -284
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	hl, (iy + 3)
	push	ix
	ld	de, -290
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	bc, (ix + -3)
	ld	bc, (iy + 6)
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_257
	ld	de, -290
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
BB0_255:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_257
	ld	hl, 18
	push	hl
	push	iy
	ld	de, -317
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	bc, -305
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -317
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_destroy_args
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -302
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	pop	hl
	lea	iy, iy + 18
	dec	bc
	jq	BB0_255
BB0_257:
	ld	bc, -290
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	de, -299
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	inc	iy
	push	ix
	ld	de, -293
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	jq	BB0_252
BB0_258:
	ld	hl, (ix + -43)
	jq	BB0_260
BB0_259:
	ld	bc, -284
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
BB0_260:
	push	hl
	call	_free
	pop	hl
	ld	de, (ix + -13)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB0_264
	or	a, a
	sbc	hl, hl
	push	hl
	pop	iy
	push	ix
	ld	bc, -284
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
BB0_262:
	ld	bc, -284
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB0_264
	ld	hl, (ix + -16)
	lea	de, iy + 0
	add	hl, de
	ld	de, 18
	push	de
	push	hl
	ld	bc, -296
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -290
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -296
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_destroy_args
	ld	bc, -290
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pop	hl
	ld	bc, -284
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	push	ix
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	de, (ix + -13)
	ld	bc, 18
	add	iy, bc
	jq	BB0_262
BB0_264:
	ld	hl, (ix + -16)
	push	hl
	call	_free
	pop	hl
	ld	hl, 0
	ld	(ix + -16), hl
	ld	de, 0
	ld	(ix + -10), de
	ld	(ix + -13), de
	ld	hl, (ix + -31)
	ld	bc, -284
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB0_272
	ld	iy, (ix + -34)
BB0_266:
	push	de
	pop	hl
	ld	(ix + -3), de
	push	ix
	ld	de, -284
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	z, BB0_273
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	bc, 15
	call	__imulu
	push	hl
	pop	de
	ld	(ix + -3), bc
	push	ix
	ld	bc, -299
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	add	iy, de
	ld	hl, (iy + 6)
	push	ix
	ld	de, -290
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	bc, (ix + -3)
	ld	bc, (iy + 9)
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_271
	ld	de, -290
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
BB0_269:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_271
	ld	hl, 18
	push	hl
	push	iy
	ld	de, -296
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -302
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	bc, -305
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -296
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_expr_destroy_args
	ld	de, -305
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -302
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	pop	hl
	lea	iy, iy + 18
	dec	bc
	jq	BB0_269
BB0_271:
	ld	bc, -290
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	bc, -293
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	inc	de
	ld	bc, -299
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	jq	BB0_266
BB0_272:
	ld	iy, (ix + -34)
BB0_273:
	push	iy
	call	_free
	pop	hl
	ld	hl, (ix + -25)
	push	hl
	call	_free
	pop	hl
	ld	bc, -287
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_275
	ld	hl, L_.str
	push	hl
	ld	hl, _eval.s2
	push	hl
	call	_sprintf_
	jq	BB0_276
BB0_275:
	push	hl
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	ld	hl, L_.str.1
	push	hl
	ld	hl, _eval.s2
	push	hl
	call	_sprintf_
	pop	hl
	pop	hl
BB0_276:
	pop	hl
	pop	hl
	ld	hl, _eval.s2
	ld	sp, ix
	pop	ix
	ret
BB0_277:
	ld	hl, 0
	ld	bc, -287
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	jq	BB0_250
BB0_278:
	ld	hl, (ix + -52)
	push	hl
	jq	BB0_280
BB0_279:
	push	bc
BB0_280:
	call	_free
	pop	hl
	jq	BB0_281
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_expr_eval
_expr_eval:
	ld	hl, -9
	call	__frameset
	ld	iy, (ix + 6)
	ld	de, 1
	ld	bc, 27
BB1_1:
	ld	hl, (iy)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_4
	ld	hl, LJTI1_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB1_3:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	lea	iy, iy + 18
	ld	de, 1
	ld	bc, 27
	jq	BB1_1
BB1_4:
	ld	l, 127
	ld	(ix + -3), hl
	ld	iy, -4194304
BB1_5:
	lea	hl, iy + 0
	ld	de, (ix + -3)
	jq	BB1_6
BB1_7:
	ld	hl, (iy + 3)
	push	hl
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	pop	de
	pop	de
	ld	bc, -1
	jq	BB1_8
BB1_10:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), de
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	ld	hl, (ix + -9)
	push	hl
	ld	hl, (ix + -3)
	push	hl
	call	_powf
	jq	BB1_6
BB1_11:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	ld	hl, (ix + -3)
	ld	e, (ix + -9)
	jq	BB1_12
BB1_14:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	ld	hl, (ix + -3)
	ld	e, (ix + -9)
	call	__fcmp
	jq	z, BB1_13
	jq	BB1_22
BB1_15:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	ld	(ix + -3), hl
	pop	hl
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	pop	de
	pop	de
	ld	bc, (ix + -3)
BB1_8:
	call	__ixor
	jq	BB1_9
BB1_16:
	ld	hl, (iy + 3)
	ld	a, (iy + 6)
	jq	BB1_17
BB1_18:
	ld	iy, (iy + 3)
	ld	hl, (iy)
	ld	a, (iy + 3)
BB1_17:
	push	hl
	pop	iy
	jq	BB1_55
BB1_19:
	ld	hl, (iy + 3)
	push	hl
	call	_expr_eval
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	call	__fneg
	jq	BB1_24
BB1_20:
	ld	hl, (iy + 3)
	push	hl
	call	_expr_eval
	pop	bc
	ld	bc, 0
	xor	a, a
	jq	BB1_21
BB1_25:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	ld	bc, (ix + -3)
	ld	a, (ix + -9)
	call	__fdiv
	jq	BB1_24
BB1_26:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	ld	bc, (ix + -3)
	ld	a, (ix + -9)
	call	__fmul
	jq	BB1_24
BB1_27:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), de
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	ld	hl, (ix + -9)
	push	hl
	ld	hl, (ix + -3)
	push	hl
	call	_fmodf
	jq	BB1_6
BB1_28:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	ld	bc, (ix + -3)
	ld	a, (ix + -9)
	call	__fadd
	jq	BB1_24
BB1_29:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	ld	bc, (ix + -3)
	ld	a, (ix + -9)
	call	__fsub
	jq	BB1_24
BB1_30:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	ld	(ix + -3), hl
	pop	hl
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	push	hl
	pop	bc
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	call	__ishl
	jq	BB1_9
BB1_31:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	ld	(ix + -3), hl
	pop	hl
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	push	hl
	pop	bc
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	call	__ishrs
	jq	BB1_9
BB1_32:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	ld	bc, (ix + -3)
	ld	a, (ix + -9)
	jq	BB1_33
BB1_34:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	ld	bc, (ix + -3)
	ld	a, (ix + -9)
BB1_12:
	call	__fcmp
	jq	m, BB1_22
BB1_13:
	ld	a, 0
	jq	BB1_23
BB1_35:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	ld	hl, (ix + -3)
	ld	e, (ix + -9)
BB1_33:
	call	__fcmp
	jq	m, BB1_13
BB1_22:
	ld	a, 1
BB1_23:
	and	a, 1
	ld	bc, 0
	ld	c, a
	xor	a, a
	call	__ultof
	jq	BB1_24
BB1_36:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	ld	(ix + -3), hl
	ld	(ix + -9), e
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	ld	hl, (ix + -3)
	ld	e, (ix + -9)
BB1_21:
	call	__fcmp
	jq	nz, BB1_13
	jq	BB1_22
BB1_37:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	ld	(ix + -3), hl
	pop	hl
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	pop	de
	pop	de
	ld	bc, (ix + -3)
	call	__iand
	jq	BB1_9
BB1_38:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	ld	(ix + -3), hl
	pop	hl
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	push	de
	push	hl
	call	_to_int
	pop	de
	pop	de
	ld	bc, (ix + -3)
	call	__ior
BB1_9:
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
BB1_24:
	push	bc
	pop	hl
	ld	e, a
BB1_6:
	ld	sp, ix
	pop	ix
	ret
BB1_39:
	ld	hl, (iy + 3)
	push	hl
	ld	(ix + -6), iy
	call	_expr_eval
	pop	bc
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jq	z, BB1_49
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	push	hl
	pop	iy
	ld	(ix + -3), de
	ld	bc, 0
	xor	a, a
	ld	d, a
	call	__fcmp
	jq	nz, BB1_57
	ld	a, 0
	jq	BB1_58
BB1_42:
	ld	(ix + -6), iy
	ld	hl, (iy + 3)
	push	hl
	call	_expr_eval
	pop	bc
	ld	(ix + -3), de
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jq	z, BB1_44
	ld	de, (ix + -3)
	push	de
	push	hl
	ld	(ix + -9), hl
	call	__isnanf
	ld	iy, (ix + -9)
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_5
BB1_44:
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	pop	bc
	push	hl
	pop	iy
	ld	(ix + -3), de
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jq	nz, BB1_51
	ld	a, 0
	jq	BB1_52
BB1_46:
	ld	(ix + -6), iy
	ld	iy, (iy + 3)
	pea	iy + 18
	call	_expr_eval
	ld	(ix + -9), hl
	pop	hl
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	ld	hl, (iy)
	ld	bc, 26
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_50
	ld	iy, (iy + 3)
	ld	bc, (ix + -9)
	ld	(iy), bc
	ld	(iy + 3), e
	ld	l, e
	ld	(ix + -3), hl
	push	bc
	pop	iy
	jq	BB1_5
BB1_48:
	ld	bc, (iy + 3)
	lea	de, iy + 0
	push	bc
	pop	iy
	ld	hl, (iy + 3)
	push	de
	pop	iy
	ld	de, (iy + 15)
	push	de
	pea	iy + 6
	push	bc
	call	__indcallhl
	push	hl
	pop	iy
	ld	(ix + -3), de
	pop	hl
	pop	hl
	pop	hl
	jq	BB1_5
BB1_49:
	push	bc
	jq	BB1_54
BB1_50:
	ld	l, e
	ld	(ix + -3), hl
	ld	iy, (ix + -9)
	jq	BB1_5
BB1_51:
	ld	a, 1
BB1_52:
	or	a, a
	sbc	hl, hl
	bit	0, a
	jq	nz, BB1_5
	push	hl
BB1_54:
	pop	iy
	xor	a, a
BB1_55:
	ld	l, a
BB1_56:
	ld	(ix + -3), hl
	jq	BB1_5
BB1_57:
	ld	a, 1
BB1_58:
	bit	0, a
	ld	hl, 0
	jq	nz, BB1_5
	push	hl
	pop	iy
	ld	l, d
	jq	BB1_56
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI1_0:
	private	LJTI1_0
LJTI1_0:
	dl	BB1_19
	dl	BB1_20
	dl	BB1_7
	dl	BB1_10
	dl	BB1_25
	dl	BB1_26
	dl	BB1_27
	dl	BB1_28
	dl	BB1_29
	dl	BB1_30
	dl	BB1_31
	dl	BB1_11
	dl	BB1_32
	dl	BB1_34
	dl	BB1_35
	dl	BB1_36
	dl	BB1_14
	dl	BB1_37
	dl	BB1_38
	dl	BB1_15
	dl	BB1_39
	dl	BB1_42
	dl	BB1_46
	dl	BB1_3
	dl	BB1_16
	dl	BB1_18
	dl	BB1_48

	section	.text,"ax",@progbits
	private	_expr_func
_expr_func:
	ld	hl, -6
	call	__frameset
	ld	de, 0
	ld	iy, _user_funcs
BB2_1:
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_6
	ld	(ix + -3), iy
	ld	(ix + -6), hl
	push	hl
	call	_strlen
	ld	bc, (ix + 9)
	pop	de
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_4
	push	bc
	ld	hl, (ix + 6)
	push	hl
	ld	hl, (ix + -6)
	push	hl
	call	_strncmp
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_7
BB2_4:
	ld	iy, (ix + -3)
	lea	iy, iy + 12
	ld	de, 0
	jq	BB2_1
BB2_6:
	jq	BB2_5
BB2_7:
	ld	de, (ix + -3)
BB2_5:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_vec_expand
_vec_expand:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 9)
	ld	iy, (ix + 12)
	ld	bc, 0
	ld	hl, (hl)
	ld	iy, (iy)
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB3_1
	jq	BB3_7
BB3_1:
	ld	bc, (ix + 6)
	lea	hl, iy + 0
	add	hl, hl
	ex	de, hl
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_2
	ex	de, hl
	jq	BB3_4
BB3_2:
	ld	hl, 1
BB3_4:
	push	bc
	pop	iy
	ld	de, (iy)
	ld	(ix + -3), hl
	ld	bc, (ix + 15)
	call	__imulu
	push	hl
	push	de
	call	_realloc
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB3_6
	ld	bc, -1
	jq	BB3_7
BB3_6:
	ld	iy, (ix + 6)
	ld	(iy), hl
	ld	hl, (ix + 12)
	ld	de, (ix + -3)
	ld	(hl), de
	ld	bc, 0
BB3_7:
	push	bc
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_expr_var
_expr_var:
	ld	hl, -6
	call	__frameset
	ld	bc, (ix + 12)
	ld	de, 0
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB4_1
BB4_12:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
BB4_1:
	ld	hl, (ix + 9)
	ld	a, (hl)
	cp	a, 64
	jq	nc, BB4_2
	cp	a, 36
	jq	z, BB4_5
	jq	BB4_12
BB4_2:
	cp	a, 94
	jq	nz, BB4_3
	jq	BB4_12
BB4_3:
	cp	a, 124
	jq	nz, BB4_5
	jq	BB4_12
BB4_5:
	ld	hl, (ix + 6)
	ld	iy, 1
BB4_6:
	ld	hl, (hl)
	ld	(ix + -3), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_10
	ld	iy, (ix + -3)
	lea	hl, iy + 7
	ld	(ix + -6), hl
	push	hl
	call	_strlen
	ld	bc, (ix + 12)
	pop	de
	or	a, a
	sbc	hl, bc
	jq	nz, BB4_9
	push	bc
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + -6)
	push	hl
	call	_strncmp
	ld	bc, (ix + 12)
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_17
BB4_9:
	ld	iy, (ix + -3)
	lea	hl, iy + 4
	ld	de, 1
	push	de
	pop	iy
	jq	BB4_6
BB4_10:
	push	bc
	pop	hl
	ld	de, 8
	add	hl, de
	push	hl
	push	iy
	call	_calloc
	ld	de, 0
	push	hl
	pop	iy
	pop	hl
	pop	hl
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_12
	ld	hl, (ix + 6)
	ld	hl, (hl)
	ld	(iy + 4), hl
	or	a, a
	sbc	hl, hl
	ld	(iy), hl
	xor	a, a
	ld	(iy + 3), a
	lea	de, iy + 7
	ld	(ix + -6), de
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	push	de
	ld	(ix + -3), iy
	call	_strncpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -6)
	ld	de, (ix + 12)
	add	hl, de
	ld	(hl), 0
	ld	hl, (ix + 6)
	ld	de, (ix + -3)
	ld	(hl), de
	jq	BB4_12
BB4_17:
	ld	de, (ix + -3)
	jq	BB4_12
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_expr_bind
_expr_bind:
	ld	hl, -108
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, -1
	push	bc
	push	de
	push	hl
	call	_expr_op
	push	hl
	pop	de
	pop	hl
	pop	hl
	pop	hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB5_16
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	ld	bc, 3
	or	a, a
	sbc	hl, bc
	jq	nc, BB5_9
	ld	(ix + -90), de
	ld	iy, (ix + 12)
	ld	de, (iy + 3)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	hl, -1
	jq	m, BB5_17
	lea	hl, ix + -18
	ld	(ix + -96), hl
	lea	hl, ix + -36
	ld	(ix + -93), hl
	ld	iy, (ix + 12)
	ld	bc, (iy)
	ld	(ix + -99), bc
	dec	de
	ld	(iy + 3), de
	ld	bc, 18
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + -99)
	add	iy, de
	ld	hl, 18
	push	hl
	push	iy
	ld	hl, (ix + -96)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + -93)
	lea	de, iy + 3
	ld	(ix + -99), de
	ld	hl, 15
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	de
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -90)
	ld	(ix + -36), hl
	ld	hl, 18
	push	hl
	ld	iy, (ix + -93)
	pea	iy + 9
	pea	iy + 6
	ld	hl, (ix + -99)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB5_6
	ld	iy, (ix + -33)
	ld	hl, (ix + -30)
	push	hl
	pop	de
	inc	de
	ld	(ix + -30), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 18
	push	hl
	ld	hl, (ix + -96)
	jq	BB5_5
BB5_9:
	ld	iy, (ix + 12)
	ld	hl, (iy + 3)
	ld	bc, 2
	push	hl
	pop	iy
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB5_16
	ld	hl, (ix + 12)
	push	hl
	pop	bc
	lea	hl, ix + -54
	ld	(ix + -99), hl
	lea	hl, ix + -69
	ld	(ix + -102), hl
	lea	hl, ix + -87
	ld	(ix + -93), hl
	push	bc
	pop	hl
	ld	hl, (hl)
	ld	(ix + -96), hl
	ld	(ix + -105), iy
	lea	hl, iy + 0
	dec	hl
	push	bc
	pop	iy
	ld	(iy + 3), hl
	ld	bc, 18
	ld	(ix + -90), de
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + -96)
	add	hl, de
	ld	de, 18
	push	de
	push	hl
	ld	hl, (ix + -99)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	de, -2
	ld	hl, (ix + -105)
	add	hl, de
	ld	iy, (ix + 12)
	ld	(iy + 3), hl
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + -96)
	add	hl, de
	ld	de, (hl)
	ld	(ix + -96), de
	push	hl
	pop	iy
	ld	hl, 15
	push	hl
	pea	iy + 3
	ld	hl, (ix + -102)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 15
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	iy, (ix + -93)
	pea	iy + 3
	call	_memset
	ld	bc, (ix + -96)
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -90)
	ld	(ix + -87), hl
	ld	de, 23
	or	a, a
	sbc	hl, de
	jq	nz, BB5_12
	ld	de, 26
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nz, BB5_16
BB5_12:
	ld	iy, (ix + -93)
	lea	de, iy + 3
	lea	bc, iy + 6
	lea	iy, iy + 9
	ld	hl, 18
	push	hl
	ld	(ix + -108), iy
	push	iy
	ld	(ix + -105), bc
	push	bc
	ld	(ix + -90), de
	push	de
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB5_14
	ld	iy, (ix + -84)
	ld	hl, (ix + -81)
	push	hl
	pop	de
	inc	de
	ld	(ix + -81), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + -96)
	ld	(iy), hl
	ld	hl, 15
	push	hl
	ld	hl, (ix + -102)
	push	hl
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB5_14:
	ld	hl, 18
	push	hl
	ld	hl, (ix + -108)
	push	hl
	ld	hl, (ix + -105)
	push	hl
	ld	hl, (ix + -90)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB5_6
	ld	iy, (ix + -84)
	ld	hl, (ix + -81)
	push	hl
	pop	de
	inc	de
	ld	(ix + -81), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, 18
	push	hl
	ld	hl, (ix + -99)
BB5_5:
	push	hl
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB5_6:
	ld	hl, 18
	push	hl
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	pea	iy + 6
	pea	iy + 3
	push	iy
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB5_8
	ld	iy, (ix + 12)
	ld	de, (iy)
	ld	(ix + -90), de
	ld	hl, (iy + 3)
	push	hl
	pop	de
	inc	de
	ld	(iy + 3), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + -90)
	add	iy, de
	ld	hl, 18
	push	hl
	ld	hl, (ix + -93)
	push	hl
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB5_8:
	or	a, a
	sbc	hl, hl
	jq	BB5_17
BB5_16:
	ld	hl, -1
BB5_17:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_expr_binary
_expr_binary:
	ld	hl, -12
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, 15
	ld	de, 0
	lea	bc, iy + 3
	ld	(ix + -3), bc
	push	hl
	push	de
	push	bc
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	(iy), hl
	lea	hl, iy + 6
	lea	de, iy + 9
	ld	bc, 18
	push	bc
	ld	(ix + -9), de
	push	de
	ld	(ix + -6), hl
	push	hl
	ld	hl, (ix + -3)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB6_2
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix + -12), hl
	ld	hl, (iy + 6)
	push	hl
	pop	de
	inc	de
	ld	(iy + 6), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + -12)
	add	iy, de
	ld	hl, 18
	push	hl
	pea	ix + 12
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB6_2:
	ld	hl, 18
	push	hl
	ld	hl, (ix + -9)
	push	hl
	ld	hl, (ix + -6)
	push	hl
	ld	hl, (ix + -3)
	push	hl
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB6_4
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix + -3), hl
	ld	hl, (iy + 6)
	push	hl
	pop	de
	inc	de
	ld	(iy + 6), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + -3)
	add	iy, de
	ld	hl, 18
	push	hl
	pea	ix + 30
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB6_4:
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_expr_copy
_expr_copy:
	ld	hl, -69
	call	__frameset
	ld	de, (ix + 6)
	ld	iy, (ix + 9)
	or	a, a
	sbc	hl, hl
	ld	(ix + -57), hl
	ld	hl, (iy)
	lea	bc, iy + 0
	push	de
	pop	iy
	ld	(iy), hl
	push	bc
	pop	iy
	ld	de, (iy)
	ld	bc, 25
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_1
	ld	hl, (iy + 3)
	ld	a, (iy + 6)
	ld	de, (ix + 6)
	push	de
	pop	iy
	ld	(iy + 3), hl
	ld	(iy + 6), a
	jq	BB7_19
BB7_1:
	ld	bc, 26
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_2
	ld	iy, (ix + 9)
	ld	hl, (iy + 3)
	ld	iy, (ix + 6)
	ld	(iy + 3), hl
	jq	BB7_19
BB7_2:
	lea	hl, ix + -18
	ld	(ix + -60), hl
	ld	bc, 27
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_13
	ld	hl, (ix + 9)
	push	hl
	pop	iy
	ld	hl, (iy + 3)
	lea	de, iy + 0
	ld	iy, (ix + 6)
	ld	(iy + 3), hl
	push	de
	pop	iy
	ld	de, (iy + 9)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	bc, 18
	push	bc
	pop	iy
	jq	m, BB7_9
	lea	hl, ix + -36
	ld	(ix + -66), hl
	ld	bc, 0
BB7_5:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB7_9
	ld	(ix + -63), bc
	lea	bc, iy + 0
	ld	iy, (ix + 9)
	ld	hl, (iy + 6)
	ld	de, (ix + -57)
	add	hl, de
	push	bc
	push	hl
	ld	hl, (ix + -60)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 18
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + -66)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -60)
	push	hl
	ld	hl, (ix + -66)
	push	hl
	call	_expr_copy
	pop	hl
	pop	hl
	ld	hl, 18
	push	hl
	ld	iy, (ix + 6)
	pea	iy + 12
	pea	iy + 9
	pea	iy + 6
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_8
	ld	iy, (ix + 6)
	ld	hl, (iy + 6)
	ld	(ix + -69), hl
	ld	hl, (iy + 9)
	push	hl
	pop	de
	inc	de
	ld	(iy + 9), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + -69)
	add	iy, de
	ld	hl, 18
	push	hl
	ld	hl, (ix + -66)
	push	hl
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB7_8:
	ld	hl, (ix + -63)
	inc	hl
	ld	(ix + -63), hl
	ld	iy, (ix + 9)
	ld	de, (iy + 9)
	ld	hl, (ix + -57)
	ld	bc, 18
	add	hl, bc
	push	bc
	pop	iy
	ld	(ix + -57), hl
	ld	bc, (ix + -63)
	jq	BB7_5
BB7_13:
	ld	iy, (ix + 9)
	ld	de, (iy + 6)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	bc, 18
	jq	m, BB7_19
	lea	hl, ix + -54
	ld	(ix + -63), hl
	or	a, a
	sbc	hl, hl
BB7_15:
	ld	(ix + -66), hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB7_19
	ld	hl, (iy + 3)
	ld	de, (ix + -57)
	add	hl, de
	push	bc
	push	hl
	ld	hl, (ix + -60)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 18
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + -63)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -60)
	push	hl
	ld	hl, (ix + -63)
	push	hl
	call	_expr_copy
	pop	hl
	pop	hl
	ld	hl, 18
	push	hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	pea	iy + 9
	pea	iy + 6
	pea	iy + 3
	call	_vec_expand
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_18
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix + -69), hl
	ld	hl, (iy + 6)
	push	hl
	pop	de
	inc	de
	ld	(iy + 6), de
	ld	bc, 18
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + -69)
	add	iy, de
	ld	hl, 18
	push	hl
	ld	hl, (ix + -63)
	push	hl
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB7_18:
	ld	bc, (ix + -66)
	inc	bc
	ld	iy, (ix + 9)
	ld	hl, (iy + 6)
	ld	(ix + -66), hl
	ld	hl, (ix + -57)
	ld	de, 18
	add	hl, de
	ld	de, (ix + -66)
	ld	(ix + -57), hl
	push	bc
	pop	hl
	ld	bc, 18
	jq	BB7_15
BB7_9:
	ld	iy, (ix + 9)
	ld	iy, (iy + 3)
	ld	hl, (iy + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB7_19
	ld	de, 1
	push	hl
	push	de
	call	_calloc
	pop	de
	pop	de
	ld	iy, (ix + 6)
	ld	(iy + 15), hl
BB7_19:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_expr_op
_expr_op:
	ld	hl, -6
	call	__frameset
	ld	iy, 0
	ld	bc, 162
	lea	hl, iy + 0
BB8_1:
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	jq	z, BB8_15
	ld	(ix + -3), de
	ld	hl, _OPS
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -6), hl
	push	hl
	call	_strlen
	pop	de
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	jq	nz, BB8_12
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	ld	hl, (ix + -6)
	push	hl
	call	_strncmp
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB8_12
	ld	de, (ix + -3)
	ld	iy, _OPS
	add	iy, de
	ld	iy, (iy + 3)
	ld	hl, (ix + 12)
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jq	z, BB8_14
	lea	hl, iy + 0
	dec	hl
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	ld	hl, 1
	jq	c, BB8_11
	ld	hl, (ix + -3)
	ld	bc, 12
	or	a, a
	sbc	hl, bc
	ld	a, 1
	jq	z, BB8_8
	ld	a, 0
BB8_8:
	ld	hl, (ix + -3)
	ld	bc, 156
	or	a, a
	sbc	hl, bc
	ld	l, 1
	jq	z, BB8_10
	ld	l, 0
BB8_10:
	or	a, l
	ld	l, a
	ld	bc, 1
	call	__iand
BB8_11:
	ld	bc, (ix + 12)
	or	a, a
	sbc	hl, bc
	jq	z, BB8_13
BB8_12:
	ld	de, 6
	ld	hl, (ix + -3)
	add	hl, de
	ld	iy, 0
	ld	bc, 162
	jq	BB8_1
BB8_15:
BB8_13:
	lea	hl, iy + 0
	ld	sp, ix
	pop	ix
	ret
BB8_14:
	jq	BB8_13
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_expr_destroy_args
_expr_destroy_args:
	ld	hl, -30
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, 25
	ld	de, (iy)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	jq	c, BB9_15
	lea	hl, ix + -18
	ld	(ix + -21), hl
	ld	bc, 27
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB9_10
	ld	de, (iy + 9)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB9_6
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix + -24), de
	ex	de, hl
BB9_4:
	ld	(ix + -27), de
	ex	de, hl
	ld	de, (ix + -24)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB9_6
	ld	hl, (iy + 6)
	push	bc
	pop	de
	ld	(ix + -30), de
	add	hl, de
	ld	de, 18
	push	de
	push	hl
	ld	hl, (ix + -21)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -21)
	push	hl
	call	_expr_destroy_args
	ld	iy, (ix + 6)
	pop	hl
	ld	de, (ix + -27)
	inc	de
	ld	hl, (iy + 9)
	ld	(ix + -24), hl
	ld	hl, (ix + -30)
	ld	bc, 18
	add	hl, bc
	push	hl
	pop	bc
	jq	BB9_4
BB9_10:
	ld	de, (iy + 6)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB9_14
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix + -24), de
	ex	de, hl
BB9_12:
	ld	(ix + -27), de
	ex	de, hl
	ld	de, (ix + -24)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB9_14
	ld	hl, (iy + 3)
	push	bc
	pop	de
	ld	(ix + -30), de
	add	hl, de
	ld	de, 18
	push	de
	push	hl
	ld	hl, (ix + -21)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -21)
	push	hl
	call	_expr_destroy_args
	ld	iy, (ix + 6)
	pop	hl
	ld	de, (ix + -27)
	inc	de
	ld	hl, (iy + 6)
	ld	(ix + -24), hl
	ld	hl, (ix + -30)
	ld	bc, 18
	add	hl, bc
	push	hl
	pop	bc
	jq	BB9_12
BB9_6:
	ld	hl, (iy + 6)
	push	hl
	call	_free
	ld	iy, (ix + 6)
	pop	hl
	ld	hl, 0
	ld	(iy + 6), hl
	ld	(iy + 12), hl
	ld	(iy + 9), hl
	ld	de, (iy + 15)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB9_15
	ld	iy, (iy + 3)
	ld	hl, (iy + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB9_8
	jq	BB9_9
BB9_14:
	ld	hl, (iy + 3)
	push	hl
	call	_free
	pop	hl
	ld	hl, 0
	ld	iy, (ix + 6)
	ld	(iy + 3), hl
	ld	(iy + 9), hl
	ld	(iy + 6), hl
	jq	BB9_15
BB9_8:
	push	de
	push	iy
	call	__indcallhl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	de, (iy + 15)
BB9_9:
	push	de
	call	_free
	pop	hl
BB9_15:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_to_int
_to_int:
	call	__frameset0
	ld	de, (ix + 6)
	ld	a, (ix + 9)
	ld	l, a
	push	hl
	push	de
	call	__isnanf
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jq	nz, BB10_4
	ld	a, (ix + 9)
	ld	l, a
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	__isinff
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB10_2
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__ftol
	push	bc
	pop	hl
	jq	BB10_4
BB10_2:
	ld	a, (ix + 9)
	ld	l, a
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	__isinff
	pop	de
	pop	de
	ld	bc, 8388607
	call	__imulu
BB10_4:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	private	_eval.s2
_eval.s2:
	rb	1024

	section	.bss,"aw",@nobits
	private	_user_funcs
_user_funcs:
	rb	12

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"Syntax error",000o

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"%f",000o

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"-u",000o

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"^u",000o

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"!u",000o

	section	.rodata,"a",@progbits
	private	L_.str.5
L_.str.5:
	db	",",000o

	section	.rodata,"a",@progbits
	private	L_.str.6
L_.str.6:
	db	"{",000o

	section	.rodata,"a",@progbits
	private	L___const.expr_create.str
L___const.expr_create.str:
	dl	L_.str.6
	dl	1

	section	.rodata,"a",@progbits
	private	L_.str.7
L_.str.7:
	db	"(",000o

	section	.rodata,"a",@progbits
	private	L___const.expr_create.str.8
L___const.expr_create.str.8:
	dl	L_.str.7
	dl	1

	section	.rodata,"a",@progbits
	private	L_.str.9
L_.str.9:
	db	"$%d",000o

	section	.rodata,"a",@progbits
	private	_OPS
_OPS:
	dl	L_.str.2
	dl	1
	dl	L_.str.4
	dl	2
	dl	L_.str.3
	dl	3
	dl	L_.str.10
	dl	4
	dl	L_.str.11
	dl	6
	dl	L_.str.12
	dl	5
	dl	L_.str.13
	dl	7
	dl	L_.str.14
	dl	8
	dl	L_.str.15
	dl	9
	dl	L_.str.16
	dl	10
	dl	L_.str.17
	dl	11
	dl	L_.str.18
	dl	12
	dl	L_.str.19
	dl	13
	dl	L_.str.20
	dl	14
	dl	L_.str.21
	dl	15
	dl	L_.str.22
	dl	16
	dl	L_.str.23
	dl	17
	dl	L_.str.24
	dl	18
	dl	L_.str.25
	dl	19
	dl	L_.str.26
	dl	20
	dl	L_.str.27
	dl	21
	dl	L_.str.28
	dl	22
	dl	L_.str.29
	dl	23
	dl	L_.str.5
	dl	24
	dl	L_.str.15
	dl	1
	dl	L_.str.30
	dl	2
	dl	L_.str.26
	dl	3

	section	.rodata,"a",@progbits
	private	L_.str.10
L_.str.10:
	db	"**",000o

	section	.rodata,"a",@progbits
	private	L_.str.11
L_.str.11:
	db	"*",000o

	section	.rodata,"a",@progbits
	private	L_.str.12
L_.str.12:
	db	"/",000o

	section	.rodata,"a",@progbits
	private	L_.str.13
L_.str.13:
	db	"%",000o

	section	.rodata,"a",@progbits
	private	L_.str.14
L_.str.14:
	db	"+",000o

	section	.rodata,"a",@progbits
	private	L_.str.15
L_.str.15:
	db	"-",000o

	section	.rodata,"a",@progbits
	private	L_.str.16
L_.str.16:
	db	"<<",000o

	section	.rodata,"a",@progbits
	private	L_.str.17
L_.str.17:
	db	">>",000o

	section	.rodata,"a",@progbits
	private	L_.str.18
L_.str.18:
	db	"<",000o

	section	.rodata,"a",@progbits
	private	L_.str.19
L_.str.19:
	db	"<=",000o

	section	.rodata,"a",@progbits
	private	L_.str.20
L_.str.20:
	db	">",000o

	section	.rodata,"a",@progbits
	private	L_.str.21
L_.str.21:
	db	">=",000o

	section	.rodata,"a",@progbits
	private	L_.str.22
L_.str.22:
	db	"==",000o

	section	.rodata,"a",@progbits
	private	L_.str.23
L_.str.23:
	db	"!=",000o

	section	.rodata,"a",@progbits
	private	L_.str.24
L_.str.24:
	db	"&",000o

	section	.rodata,"a",@progbits
	private	L_.str.25
L_.str.25:
	db	"|",000o

	section	.rodata,"a",@progbits
	private	L_.str.26
L_.str.26:
	db	"^",000o

	section	.rodata,"a",@progbits
	private	L_.str.27
L_.str.27:
	db	"&&",000o

	section	.rodata,"a",@progbits
	private	L_.str.28
L_.str.28:
	db	"||",000o

	section	.rodata,"a",@progbits
	private	L_.str.29
L_.str.29:
	db	"=",000o

	section	.rodata,"a",@progbits
	private	L_.str.30
L_.str.30:
	db	"!",000o

	section	.rodata,"a",@progbits
	private	_prec
_prec:
	dl	0
	dl	1
	dl	1
	dl	1
	dl	2
	dl	2
	dl	2
	dl	2
	dl	3
	dl	3
	dl	4
	dl	4
	dl	5
	dl	5
	dl	5
	dl	5
	dl	5
	dl	5
	dl	6
	dl	7
	dl	8
	dl	9
	dl	10
	dl	11
	dl	12
	dl	0
	dl	0
	dl	0

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__Unwind_SjLj_Register
	extern	__fadd
	extern	__isinff
	extern	_memcpy
	extern	__ixor
	extern	__ltof
	extern	_free
	extern	_realloc
	extern	_snprintf_
	extern	_isspace
	extern	__indcallhl
	extern	__ior
	extern	_isdigit
	extern	__ishrs
	extern	__fmul
	extern	__fdiv
	extern	__imulu
	extern	_calloc
	extern	__fcmp
	extern	__frameset0
	extern	_strncmp
	extern	_fmodf
	extern	_sprintf_
	extern	_powf
	extern	_strncpy
	extern	__ishl
	extern	__ftol
	extern	_strlen
	extern	__setflag
	extern	__iand
	extern	__fsub
	extern	_memset
	extern	__frameset
	extern	__ultof
	extern	__Unwind_SjLj_Unregister
	extern	__fneg
	extern	__isnanf
